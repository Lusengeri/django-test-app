AWSTemplateFormatVersion: 2010-09-09
Description: A template for a highly available Django application backed by a PostgreSQL database

Parameters:
  VPCCidr:
    Type: String
    Default: 10.0.0.0/16

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidr 
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'Django App VPC'
  
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties: 
      Tags:
        - Key: Name
          Value: 'Django APP IGW'

  VPCtoIGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true 
      CidrBlock: 10.0.1.0/24 
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: 'Public Subnet 1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.2.0/24 
      AvailabilityZone: !Select
        - 1 
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: 'Public Subnet 2'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.3.0/24 
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: 'Private Subnet 1'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref VPC 
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.4.0/24 
      AvailabilityZone: !Select
        - 1 
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: 'Private Subnet 2'
  
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'Public Route Table'

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'Private Route Table'

  RouteToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1 

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2 

  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group allowing HTTP connections from the internet'
      GroupName: elb-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group allowing HTTP/HTTPS connections from ELB'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group database connections from WebServerSecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432 
          ToPort: 5432 
          CidrIp: 0.0.0.0/0
            #SourceSecurityGroupId: !Ref WebServerSecurityGroup

  Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: ec2-s3-codedeploy 
      ImageId: ami-0cb4e786f15603b0d
      InstanceType: t2.micro
      KeyName: ore-key
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: django-test-app

  Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: ec2-s3-codedeploy 
      ImageId: ami-0cb4e786f15603b0d      
      InstanceType: t2.micro
      KeyName: ore-key
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: django-test-app

  ELB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: django-test-app-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  ELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: HTTP
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /api
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Name: django-test-app-tg
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref Instance1
          Port: 80
        - Id: !Ref Instance2
          Port: 80
      TargetType: instance
      VpcId: !Ref VPC

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'RDS Subnet Group for django-test-app-stack'
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      Tags:
        - Key: Name
          Value: django-test-app-db-subnet-grp

  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AutoMinorVersionUpgrade: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: django-test-app-db
      DBName: taskmanagerdb
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: postgres
      EngineVersion: 13.6
      MasterUsername: ubuntu 
      MasterUserPassword: postpass  
      Port: 5432
      StorageType: gp2
      VPCSecurityGroups: 
        - !Ref DBSecurityGroup

Outputs:
  Instance1PublicIP: 
    Description: 'IP address of created Instance1'
    Value: !GetAtt 
      - Instance1
      - PublicIp

  Instance2PublicIP: 
    Description: 'IP address of created Instance2'
    Value: !GetAtt 
      - Instance2
      - PublicIp

  DBEndpoint:
    Description: 'The Endpoint of the created Database instance'
    Value: !GetAtt
      - PostgresDB
      - Endpoint.Address

  ELBDNSName:
    Description: 'The DNS name of the provisioned ELB'
    Value: !GetAtt
      - ELB
      - DNSName 
